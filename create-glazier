#!/bin/bash


# defaults. They can be overwritten by command line parameters
verbosity=2  # 1=least verbose, 3=most verbose
dry_run="no"
vmname="glaziervm"
vmpath="~/.glazier"
productkey=""
use_colors="yes"
windows_iso=""
sqlserver_iso=""
virtio_iso=""
profiles=""
sqlserverversion="none"
assetsdir="assets"
tmpdir="/tmp/glazier"
os_network_id=""
os_key_name=""
os_security_group=""
os_flavor=""
whoami=`id -u`
insecure="false"
glazierpath=`dirname $0`
glazier_version=`cat ${glazierpath}/.glazier_version`


# shows the users the script's syntax
function show_help()
{
	cat <<EOF
Syntax: `basename $0` <options>

Available options:
--windows-iso /path/to/windows_iso_kit		- (required) specifies the location of the Windows iso image
--virtio-iso /path/to/virtio_iso_kit		- (required) specifies the path to the virtio iso image
--profile PATH					- (optional) path to a glazier profile directory.
						  Can be used multiple times
--vm-path PATH					- (optional) path to a directory where VBox files will
						  be saved. The default is ~/.glazier. Make sure to have at least 100GB free
--product-key KEY				- (required) Windows product key
--os-network-id NETWORK_ID			- (required) OpenStack network id
--os-key-name KEY_NAME				- (required) OpenStack key name
--os-security-group SECURITY_GROUP		- (required) OpenStack security group
--os-flavor FLAVOR				- (required) OpenStack flavor
--insecure					- (optional) create a Windows image for a HDP that doesen't have an https certificate
--windows-update-proxy					- (optional) proxy used for Windows Updates on image
--dry-run					- (optional) run but don't make any changes
--verbosity verbosity_level			- (optional) verbosity level is an interger between 1-3, with 1
						  being the least verbose and 3 being the most verbose
--use-colors {yes|no}				- (optional) should the script display colors or not
--version					- (optional) show the version
--help						- (optional) shows this message
EOF
}



# sets the appropiate color values based on $use_colors
function set_colors()
{
	if [ "$use_colors" == "yes" -a "$os_type" == "Linux" ];
	then
		txtred='\e[0;31m' # Red
		txtgrn='\e[0;32m' # Green
		txtylw='\e[0;33m' # Yellow
		txtblu='\e[0;34m' # Blue
		txtpur='\e[0;35m' # Purple
		txtcyn='\e[0;36m' # Cyan
		txtwht='\e[0;37m' # White
		bldblk='\e[1;30m' # Black - Bold
		bldred='\e[1;31m' # Red
		bldgrn='\e[1;32m' # Green
		bldylw='\e[1;33m' # Yellow
		bldblu='\e[1;34m' # Blue
		bldpur='\e[1;35m' # Purple
		bldcyn='\e[1;36m' # Cyan
		bldwht='\e[1;37m' # White
		txtrst='\e[0m'    # Text Reset
	else
		txtred=''
		txtgrn=''
		txtylw=''
		txtblu=''
		txtpur=''
		txtcyn=''
		txtwht=''
		bldblk=''
		bldred=''
		bldgrn=''
		bldylw=''
		bldblu=''
		bldpur=''
		bldcyn=''
		bldwht=''
		txtrst=''
	fi
}

function check_os() 
{
	auth_request "tenantId" $OS_TENANT_ID
	auth_request "tenantName" $OS_TENANT_NAME 
}

#verifies if provided OpenStack credentials are valid
function auth_request()
{
	info 2 "Checking OpenStack credentials for ${1} ${2}"
	local request="
{ \"auth\":
   {
        \"$1\": \"$2\",
        \"passwordCredentials\": {
            \"username\": \"$OS_USERNAME\",
            \"password\": \"$OS_PASSWORD\"
        }
    }

}"
	local curl_verbosity=""
	if [ $verbosity -lt 3 ];
	then
		curl_verbosity='-sS' 
	fi

	local ignnore_ssl=""
        if [ "$insecure" == "true"  ];
	then
		ignore_ssl="--insecure"
	fi

	local cacert=""
	if [ ! -z "${OS_CACERT}" ];
	then
		cacert="--cacert ${OS_CACERT}"
	fi

        local curl_output=`curl -X POST -w "%{http_code}" $ignore_ssl ${cacert} -i -H "Content-type: application/json" -d "$request" ${OS_AUTH_URL}/tokens $curl_verbosity`
	if [ $verbosity -eq 3 ];
        then
                echo $curl_output
        fi

	curl_code=`echo $curl_output | rev | cut -b 1-3 | rev`

	if [ $curl_code -ne 200 ];
	then
		error 1 "Unable to validate OpenStack credentials for ${1}: $2"
		exit 1
	fi

	info 2 "Successfully validated credentials for ${1} ${2}"
}

# checks what operating system this is
function get_os()
{
	info 2 "Checking what OS this is"
	os_type=""

	info 3 "Checking if this is a Linux system"
	[ "`uname -s`" == "Linux" ] && os_type="Linux"

	info 3 "Checking if this is an OSX system"
	[ "`uname -s`" == "Darwin" ] && os_type="OSX"


	if [ -z "$os_type" ];
	then
		error 1 "This is neither a Linux nor an OSX operating system. Exiting..."
		exit 1
	fi

	info 3 "Operating system is ${bldylw}${os_type}${txtrst}"
}



# parses the command line parameters
function parse_parameters()
{

	# empty args.csv in case there was a previous run
	if [ -e ${tmpdir}/args.csv ];
	then
		run 3 rm -f "${tmpdir}/args.csv"
	fi

	until [ $# -eq 0 ];
	do
		case $1 in
		"--use-colors")
			shift
			use_colors=$1
			set_colors
			shift
			info 3 "Got ${bldylw}use-colors${txtrst} = ${use_colors}"
			echo use_colors,${use_colors} >>${tmpdir}/args.csv
			;;
		"--verbosity"|"-v")
			shift
			verbosity=$1
			shift
			info 3 "Got verbosity level parameter ${bldylw}${verbosity}${txtrst}"
			echo verbosity,${verbosity} >>${tmpdir}/args.csv
			;;
		"--windows-iso")
			shift
			windows_iso=$1
			shift
			info 3 "Got ${bldylw}windows-iso${txtrst} = ${windows_iso}"
			echo windows-iso,${windows_iso} >>${tmpdir}/args.csv
			;;
		"--sql-server-iso")
			# TODO
			shift
			sqlserver_iso=$1
			shift
			info 3 "Got ${bldylw}sqlserver-iso${txtrst} = ${sqlserver_iso}"
			echo sql-server-iso,${sqlserver_iso} >>${tmpdir}/args.csv
			;;
		"--virtio-iso")
			shift
			virtio_iso=$1
			shift
			info 3 "Got ${bldylw}virtio-iso${txtrst} = ${virtio_iso}"
			echo virtio-iso,${virtio_iso} >>${tmpdir}/args.csv
			;;
		"--os-network-id")
			shift
			os_network_id=$1
			shift
			info 3 "Got ${bldylw}os-network-id${txtrst} = ${os_network_id}"
			echo os-network-id,${os_network_id} >>${tmpdir}/args.csv
			;;
		"--os-key-name")
			shift
			os_key_name=$1
			shift
			info 3 "Got ${bldylw}os-key-name${txtrst} = ${os_key_name}"
			echo os-key-name,${os_key_name} >>${tmpdir}/args.csv
			;;
		"--os-security-group")
			shift
			os_security_group=$1
			shift
			info 3 "Got ${bldylw}os-security-group${txtrst} = ${os_security_group}"
			echo os-security-group,${os_security_group} >>${tmpdir}/args.csv
			;;
		"--os-flavor")
			shift
			os_flavor=$1
			shift
			info 3 "Got ${bldylw}os-flavor${txtrst} = ${os_flavor}"
			echo os-flavor,${os_flavor} >>${tmpdir}/args.csv
			;;
		"--windows-update-proxy")
			shift
			wu_proxy=$1
			shift
			info 3 "Got ${bldylw}windows-update-proxy${txtrst} = ${wu_proxy}"
			echo windows-update-proxy,${wu_proxy} >>${tmpdir}/args.csv
			;;
		"--help"|"-h")
			show_help
			shift
			exit 0
			;;
		"--dry-run"|"-d")
			shift
			dry_run="yes"
			info 3 "Got ${bldylw}dry-run${txtrst} = ${dry_run}"
			;;
		"--profile"|"-p")
			shift
			profiles="$1 $profiles"
			info 3 "Added profile ${bldylw}$1${txtrst} to profile list"
			echo profile,`basename $1` >>${tmpdir}/args.csv
			shift
			;;
		"--with-sql-server")
			# TODO
			shift
			sqlserverversion=$1
			shift
			if [ "${sqlserverversion}" == "2012" -o "$sqlserverversion" == "2014" -o "${sqlserverversion}" == "none" ];
			then
				info 3 "Using SQLServer version ${bldylw}$sqlserverversion${txtrst}"
				echo with-sql-server,${sqlserverversion} >>${tmpdir}/args.csv
			else
				error 1 "Unkown SQLServer version ${sqlserverversion}"
				exit 1
			fi
			;;
		"--vm-path")
			shift
			vmpath=$1
			shift
			info 3 "Got vmpath = $vmpath"
			echo vm-path,${vmpath} >>${tmpdir}/args.csv
			;;
		"--product-key")
			shift
			productkey=$1
			shift
			info 3 "Got product key"
			echo product-key,${productkey} >>${tmpdir}/args.csv
			;;
		"--version")
			echo ${glazier_version}
			exit 0
			;;
		"--insecure")
			shift
			info 3 "Got insecure flag"
			insecure="true"
			;;
		*)
			error 1 "Unknown parameter $1 ... Exiting"
			exit 1
			;;
		esac
	done

	if [ -e "${tmpdir}/args.csv" ];
	then
		cat ${tmpdir}/args.csv | sort | uniq > ${tmpdir}/args.csv.sorted
		mv -f ${tmpdir}/args.csv.sorted ${tmpdir}/args.csv
	fi
}



# copy all profiles to the floppy
function copy_profiles_to_floppy()
{
	# the directory where the floppy is mounted
	local destination=$1

	# profile name
	local profile

	# go trough all profiles
	for profile in $profiles;
	do
		# copy the whole directory to the floppy
		if [ ! -z "$profile" ];
		then
			info 3 "Copying profile ${profile} to the floppy image"
			profile_dir=`echo "${profile}" | sed 's#/*$##'`
			run 3 cp -R ${profile_dir} ${destination}
		fi
	done

}

# based on which OS we run, create a virtual floppy disk
function create_vfd()
{
	info 2 "Creating floppy"

	# check if $vmpath/floppy exists, if not, create it
	if [ ! -d "$vmpath/floppy" ];
	then
		run 3 mkdir -p "$vmpath/floppy"
	fi

	case "$os_type" in
	"Linux")

		# create a 2MB empty file
		info 3 "Creating empty floppy image file"
		run 3 dd if=/dev/zero of=${vmpath}/unattend.img bs=1024 count=2048

		# make a vfat filesystem
		info 3 "Formatting the floppy image with vfat filesystem"
		run 3 mkfs.vfat ${vmpath}/unattend.img

		# mount the floppy, we need  for this
		info 3 "Mounting the floppy image"
		run 3 sudo mount -t vfat -o loop -o uid=${whoami} ${vmpath}/unattend.img ${vmpath}/floppy

		# recursively copy all assets
		info 3 "Copying assets to the floppy drive"
		run 3 cp -R ${glazierpath}/${assetsdir}/* ${vmpath}/floppy
		run 3 cp -R ${glazierpath}/glazier-scripts/* ${vmpath}/floppy

		# copying csv files
		info 3 "Moving argument list csv file to the floppy"
		echo "version,${glazier_version}" >>${tmpdir}/args.csv
		run 3 sudo mv -f ${tmpdir}/args.csv ${vmpath}/floppy

		# putting OS* env variables on the floppy
		info 3 "Copying environment variables to the floppy"
		echo OS_REGION_NAME,${OS_REGION_NAME} >>${vmpath}/floppy/env.csv
		echo OS_PASSWORD,${OS_PASSWORD} >>${vmpath}/floppy/env.csv
		echo OS_USERNAME,${OS_USERNAME} >>${vmpath}/floppy/env.csv
		echo OS_TENANT_NAME,${OS_TENANT_NAME} >>${vmpath}/floppy/env.csv
		echo OS_TENANT_ID,${OS_TENANT_ID} >>${vmpath}/floppy/env.csv
		echo OS_AUTH_URL,${OS_AUTH_URL} >>${vmpath}/floppy/env.csv
		[ "${insecure}" == "true" ] && echo "OS_INSECURE,true" >>${vmpath}/floppy/env.csv

		# copy profiles to the floppy
		[ ! -d ${vmpath}/floppy/profiles ] && run 3 mkdir -p ${vmpath}/floppy/profiles
		copy_profiles_to_floppy ${vmpath}/floppy/profiles/

		# create a csv file containing the drive letters for the isos
		info 3 "Mapping ISOs to drive letters"
		map_drive_letters D E F G H >${vmpath}/floppy/driveletters.csv

		# check if env var OS_CACERT is set and if so, copy the file on the floppy if it exists
		if [ ! -z "${OS_CACERT}" -a -e "${OS_CACERT}" ];
		then
			info 3 "OS_CACERT is set and the file exists. Copying it to the floppy"
			run 3 cp "${OS_CACERT}" ${vmpath}/floppy/cacert
		fi

		# put the product key in autounattend.xml
		info 3 "Replacing product key in autounattend.xml"
		cat ${glazierpath}/${assetsdir}/autounattend.xml | sed s/PRODUCT-KEY-DO-NOT-CHANGE-THIS-LINE/${productkey}/g >${tmpdir}/autounattend.xml
		run 2 mv -f ${tmpdir}/autounattend.xml ${vmpath}/floppy/autounattend.xml

		# unmount the image
		info 3 "Unmounting the floppy image"
		# sync buffers on disk, sleep for a while to let the system close the copying process gracefully
		run 3 sync
		run 3 sleep 3
		run 3 sudo umount ${vmpath}/floppy
		;;
	"OSX")
		local floppyname="WINFLOPPY"

		# create a 2MB empty file
		info 3 "Creating empty floppy image file"
		run 3 dd if=/dev/zero of=${vmpath}/unattend.img bs=1024 count=2048

		# make the filesystem and mount it

		info 3 "Attaching image"
		local diskname=`hdiutil attach -nomount ${vmpath}/unattend.img | tail -n 1 | awk '{print $1}'`

		info 3 "Erasing volume"
		run 3 diskutil eraseVolume MS-DOS ${floppyname} ${diskname}

		# recursively copy all assets
		info 3 "Copying assets to the floppy drive"
		run 3 cp -R ${glazierpath}/${assetsdir}/* /Volumes/${floppyname}/
		run 3 cp -R ${glazierpath}/glazier-scripts/* /Volumes/${floppyname}/

		# copying csv files
		info 3 "Moving argument list csv file to the floppy"
		echo "version,${glazier_version}" >>${tmpdir}/args.csv
		run 3 mv -f ${tmpdir}/args.csv /Volumes/${floppyname}/

		# putting OS* env variables on the floppy
		info 3 "Copying environment variables to the floppy"
		echo OS_REGION_NAME,${OS_REGION_NAME} >>/Volumes/${floppyname}/env.csv
		echo OS_PASSWORD,${OS_PASSWORD} >>/Volumes/${floppyname}/env.csv
		echo OS_USERNAME,${OS_USERNAME} >>/Volumes/${floppyname}/env.csv
		echo OS_TENANT_NAME,${OS_TENANT_NAME} >>/Volumes/${floppyname}/env.csv
		echo OS_TENANT_ID,${OS_TENANT_ID} >>/Volumes/${floppyname}/env.csv
		echo OS_AUTH_URL,${OS_AUTH_URL} >>/Volumes/${floppyname}/env.csv
		[ "${insecure}" == "true" ] && echo "OS_INSECURE,true" >>/Volumes/${floppyname}/env.csv

		# copy profiles to the floppy
		[ ! -d /Volumes/${floppyname}/profiles ] && run 3 mkdir -p /Volumes/${floppyname}/profiles
		copy_profiles_to_floppy /Volumes/${floppyname}/profiles/

		# create a csv file containing the drive letters for the isos
		info 3 "Mapping ISOs to drive letters"
		map_drive_letters D E F G H >/Volumes/${floppyname}/driveletters.csv

		# check if env var OS_CACERT is set and if so, copy the file on the floppy if it exists
		if [ ! -z "${OS_CACERT}" -a -e "${OS_CACERT}" ];
		then
			info 3 "OS_CACERT is set and the file exists. Copying it to the floppy"
			run 3 cp "${OS_CACERT}" /Volumes/${floppyname}/cacert
		fi

		# put the product key in autounattend.xml
		info 3 "Replacing product key in autounattend.xml"
		cat ${glazierpath}/${assetsdir}/autounattend.xml | sed s/PRODUCT-KEY-DO-NOT-CHANGE-THIS-LINE/${productkey}/g >${tmpdir}/autounattend.xml
		run 2 mv -f ${tmpdir}/autounattend.xml /Volumes/${floppyname}/autounattend.xml

		# unmount the image
		info 3 "Unmounting the floppy image"
		# sync buffers on disk, sleep for a while to let the system close the copying process gracefully
		run 3 sync
		run 3 sleep 3
		run 3 umount /Volumes/${floppyname}/
		run 3 sleep 3
		;;
	esac

	# removing the 'floppy' directory
	info 3 "Removing floppy directory"
	run 3 "rm -rf ${vmpath}/floppy"
}



# check if we are connected to the Internet
function validate_net_connectivity()
{
	info 2 "Checking Internet connectivity..."
	info 3 "Pinging 8.8.8.8"

	ping -c 3 8.8.8.8 1>/dev/null 2>/dev/null
	local ping_retcode=$?

	if [ ${ping_retcode} -eq 0 ];
	then
		info 3 "We are online"
	else
		error 1 "We are offline"
		exit 1
	fi
}



# check if the script's prerequisites are met
function validate_prerequisites()
{

	info 2 "Checking prerequisites"

	# check if virtualbox is installed
	info 3 "Checking if virtualbox is installed"
	which virtualbox >/dev/null
	if [ $? -ne 0 ];
	then
		error 1 "virtualbox is not installed. Exiting..."
		exit 1
	fi

	# check if VBoxManage is installed
	info 3 "Checking if VBoxManage is installed"
	which VBoxManage >/dev/null
	if [ $? -ne 0 ];
	then
		error 1 "VBoxManage is not installed. Exiting..."
		exit 1
	fi

	# check if mkfs.vfat is installed
	case "$os_type" in
	"Linux")
		info 3 "Checking if mkfs.vfat is installed"
		which mkfs.vfat >/dev/null
		if [ $? -ne 0 ];
		then
			error 1 "mkfs.vfat is not installed. Exiting..."
			exit 1
		fi
		;;
	"OSX")
		info 3 "Checking if hdiutil is installed"
		which hdiutil >/dev/null
		if [ $? -ne 0 ];
		then
			error 1 "hdiutil is not installed. Exiting..."
			exit 1
		fi
		;;
	esac


	# check if --windows-iso parameter was specified
	if [ -z "${windows_iso}" ];
	then
		error 1 "Missing --windows-iso parameter"
		exit 1
	fi

	# check if windows_iso file exists
	info 3 "Checking if Windows iso exists"
	if [ ! -e "${windows_iso}" ];
	then
		error 1 "Cannot find Windows image in : ${windows_iso}"
		exit 1
	else
		info 3 "Found Windows image in : ${windows_iso}"
	fi

	# validate the windows version
	validate_windows_image

	# check if sqlserver_iso exists
	info 3 "Checking if SQLServer iso exists"
	if [ "$sqlserverversion" == "2012" -o "$sqlserverversion" == "2014" ];
	then
		# is --sql-server-iso path defined ?
		if [ -z "$sqlserver_iso" ];
		then
			error 1 "Told to use SQLServer ${bldylw}${sqlserverversion}${txtrst} but no --sql-server-iso path defined"
			exit 1
		fi

		# does the sqlserver iso file exist ?
		if [ ! -e "${sqlserver_iso}" ];
		then
			error 1 "Cannot find SQLServer image in : ${sqlserver_iso}"
			exit 1
		else
			info 3 "Found SQLServer image in : ${sqlserver_iso}"
		fi
	fi

	# check if --virtio-iso parameter was specified
	if [ -z "${virtio_iso}" ];
	then
		error 1 "Missing --virtio-iso parameter"
		exit 1
	fi

	# check if virtio_iso file exists
	info 3 "Checking if virtio iso exists"
	if [ ! -e "${virtio_iso}" ];
	then
		error 1 "Cannot find virtio image in : ${virtio_iso}"
		exit 1
	else
		info 3 "Found virtio image in : ${virtio_iso}"
	fi

	# check if productkey is not empty
	info 3 "Checking Windows product key"
	if [ -z "$productkey" ];
	then
		error 1 "Missing Windows product key"
		exit 1
	fi

	# check if virtualbox's directory exists
	info 3 "Checking if virtualbox 'vbox' directory exists"
	if [ ! -d "${vmpath}/vbox" ];
	then
		info 3 "It doesn't exist, create it"
		run 3 mkdir -p ${vmpath}/vbox
	fi

	info 3 "Checking if virtualbox 'vbox' directory exists"
	if [ ! -d "${vmpath}/output" ];
	then
		info 3 "It doesn't exist, create it"
		run 3 mkdir -p ${vmpath}/output
	fi

	# check if the floppy directory exists
	info 3 "Checking for temporary floppy directory"
	if [ ! -d "${vmpath}/floppy" ];
	then
		info 3 "Creating temporary floppy directory"
		run 3 mkdir ${vmpath}/floppy
	fi

	# check if the temporary directory exists
	info 3 "Checking for temporary directory"
	if [ ! -d "${tmpdir}" ];
	then
		info 3 "Creating temporary directory"
		run 3 mkdir "${tmpdir}"
	fi

	# check if $os_network_id is set
	if [ -z "$os_network_id" ];
	then
		error 1 "Missing --os-network-id parameter"
		exit 1
	fi

	# check if $os_key_name is set
	if [ -z "$os_key_name" ];
	then
		error 1 "Missing --os-key-name parameter"
		exit 1
	fi

	# check if $os_security_group is set
	if [ -z "$os_security_group" ];
	then
		error 1 "Missing --os-security-group parameter"
		exit 1
	fi

	# check if $os_flavor is set
	if [ -z "$os_flavor" ];
	then
		error 1 "Missing --os-flavor parameter"
		exit 1
	fi


	# validate virtualbox version
	validate_virtualbox

	info 3 "Done checking prerequisites"
}



# check if needed environment variables are set, exit if not
function validate_environment_vars()
{
	info 2 "Checking if environment variables are defined"


	info 3 "Checking OS_TENANT_NAME"
	if [ -z ${OS_TENANT_NAME+x} ];
	then
		error 1 "The environment variable ${bldylw}OS_TENANT_NAME${txtrst} is not set. Exiting..."
		exit 1
	fi
	info 3 "${bldylw}OS_TENANT_NAME${txtrst}=$OS_TENANT_NAME"


	info 3 "Checking OS_TENANT_ID"
	if [ -z ${OS_TENANT_ID+x} ];
	then
		error 1 "The environment variable ${bldylw}OS_TENANT_ID${txtrst} is not set. Exiting..."
		exit 1
	fi
	info 3 "${bldylw}OS_TENANT_ID${txtrst}=$OS_TENANT_ID"


	info 3 "Checking OS_USERNAME"
	if [ -z ${OS_USERNAME+x} ];
	then
		error 1 "The environment variable ${bldylw}OS_USERNAME${txtrst} is not set. Exiting..."
		exit 1
	fi
	info 3 "${bldylw}OS_USERNAME${txtrst}=$OS_USERNAME"


	info 3 "Checking OS_PASSWORD"
	if [ -z ${OS_PASSWORD+x} ];
	then
		error 1 "The environment variable ${bldylw}OS_PASSWORD${txtrst} is not set. Exiting..."
		exit 1
	fi
	info 3 "${bldylw}OS_PASSWORD${txtrst}=*****"


	info 3 "Checking OS_REGION_NAME"
	if [ -z ${OS_REGION_NAME+x} ];
	then
		error 1 "The environment variable ${bldylw}OS_REGION_NAME${txtrst} is not set. Exiting..."
		exit 1
	fi
	info 3 "${bldylw}OS_REGION_NAME${txtrst}=$OS_REGION_NAME"

	info 3 "Checking OS_AUTH_URL"
	if [ -z ${OS_AUTH_URL+x} ];
	then
		error 1 "The environment variable ${bldylw}OS_AUTH_URL${txtrst} is not set. Exiting..."
		exit 1
	fi
	info 3 "${bldylw}OS_REGION_NAME${txtrst}=$OS_REGION_NAME"

	info 3 "Done checking environment variables"
}



# validates the name of the windows image
function validate_windows_image()
{
	# get just the image name, not the full path
	local windows_iso_name=`basename $windows_iso`

	info 2 "Validating Windows iso version"
	if [ -z "`echo $windows_iso_name | grep -i en`" ];
	then
		error 1 "The Windows iso doesn't seem to be an english version. Exiting..."
		exit 1
	fi


	if [ -z "`echo $windows_iso_name | grep 2012`" ];
	then
		error 1 "The Windows iso doesn't seem to be a 2012 version. Exiting..."
		exit 1
	fi


	if [ -z "`echo $windows_iso_name | grep -i x64`" ];
	then
		error 1 "The Windows iso doesn't seem to be a 64bit version. Exiting..."
		exit 1
	fi


	if [ -z "`echo $windows_iso_name | grep -i iso$`" ];
	then
		error 1 "The Windows iso provided doesn't seem to be an iso volume. Exiting..."
		exit 1
	fi
}



# validates a profile's directory structure
function validate_profile()
{
	# this is the folder containing the profile's files
	local profilename=$1

	info 3 "Validating profile ${bldylw}${profilename}${txtrst}"

	if [ ! -e "${profilename}/features.csv" ];
	then
		error 1 "Missing ${profilename}/features.csv file for profile ${bldylw}${profilename}${txtrst}"
		exit 1
	fi


	if [ ! -e "${profilename}/resources.csv" ];
	then
		error 1 "Missing ${profilename}/resources.csv file for profile ${bldylw}${profilename}${txtrst}"
		exit 1
	fi


	if [ ! -d "${profilename}/specialize" ];
	then
		error 1 "Missing ${profilename}/specialize directory for profile ${bldylw}${profilename}${txtrst}"
		exit 1
	fi


	if [ ! -e "${profilename}/specialize/specialize.ps1" ];
	then
		error 1 "Missing ${profilename}/specialize/specialize.ps1 file for profile ${bldylw}${profilename}${txtrst}"
		exit 1
	fi


	if [ ! -e "${profilename}/specialize/tools.csv" ];
	then
		error 1 "Missing ${profilename}/specialize/tools.csv file for profile ${bldylw}${profilename}${txtrst}"
		exit 1
	fi

}


# goes trough all defined profiles and validates each of them
function validate_profiles()
{
	# used to parse $profiles
	local profile

	# used for profile auto-loading (no profile specified, load them from ${glazierpath}/profiles
	local autoprofile

	# make sure at least one profile is specified
	if [ -z "${profiles}" ];
	then
		error 1 "You haven't specified any profiles, trying to load them from ./profiles"

		# try to autoload profiles from ${glazierpath}/profiles, except directories starting with "."
		for autoprofile in `find ${glazierpath}/profiles/ -maxdepth 1 -mindepth 1 -type d ! -name ".*" 2>/dev/null`;
		do
			info 3 "Adding profile $autoprofile"
			profiles="$profiles $autoprofile"
		done

		# check if any profiles were automatically added
		if [ -z "${profiles}" ];
		then
			error 1 "No profiles were found in ${glazierpath}/profiles. Exiting..."
			exit 1
		fi
	fi


	# validate each profile
	for profile in $profiles;
	do
		# validate each profile if its name is not empty
		[ ! -z "$profile" ] && validate_profile $profile
	done
}



# validates the virtualbox version
function validate_virtualbox()
{
	local vbversion=`VBoxManage --version`
	local answer=""

	info 3 "Validating virtualbox version"
	if [ "`echo ${vbversion}|cut -f 1-2 -d \.`" != "4.3" ];
	then
		error 1 "You have an unsupported version of virtualbox installed ("${vbversion}"). Supported versions are 4.3.x. Do you want to continue (type 'yes' to continue) ?"
		echo -n "Your answer:"
		read answer
		
		if [ "$answer" == "yes" ];
		then
			info 1 "Going on with an unsupported version of virtualbox. Things might not work as expected."
		else
			info 1 "Exiting..."
			exit 0
		fi
	fi
}



# shows a green info message
# Syntax:
# info verbositylevel "message"
# or, you can give the error message as stdin:
# cat file | info verbositylevel
function info()
{
	# get the verbosity of the message
	local info_verbosity=$1
	shift

	# exit the function if the verbosity if greater than the global defined verbosity
	if [ $info_verbosity -gt $verbosity ];
	then
		return 1
	fi

	# we use this later, for stdin parsing
	local outputline

	# check the number of parameters in order to see if the message is comming from stdin or as arguments to the function
	if [ $# -eq 0 ];
	then
		# the message comes from stdin, go trough it and echo it out
		echo -e "`date '+%T %D'`${bldgrn} INFO: ${txtrst}(output follows)"
		while read outputline;
		do
			echo $outputline
		done
	else
		# the message is passed as parameters to the function
		echo -e "`date '+%T %D'`${bldgrn} INFO: ${txtrst}$*"
	fi
}



# shows a red error message
# Syntax:
# error verbositylevel "message"
# or, you can give the error message as stdin:
# cat file | error verbositylevel
function error()
{
	# get the verbosity of the message
	local error_verbosity=$1
	shift

	# exit the function if the verbosity if greater than the global defined verbosity
	if [ $error_verbosity -gt $verbosity ];
	then
		return 1
	fi

	# we use this later, for stdin parsing
	local outputline

	# check the number of parameters in order to see if the message is comming from stdin or as arguments to the function
	if [ $# -eq 0 ];
	then
		# the message comes from stdin, go trough it and echo it out
		echo -e "`date '+%T %D'`${bldred} ERROR: ${txtrst}(output follows)"
		while read outputline;
		do
			echo $outputline
		done
	else
		# the message is passed as parameters to the function
		echo -e "`date '+%T %D'`${bldred} ERROR: ${txtrst}$*"
	fi
}



# runs a parameter specified command and based on the verbosity level, shows or hides the output
# Syntax: run verbositylevel "command with arguments"
function run()
{
	# get the verbosity for the run output
	local run_verbosity=$1
	shift

	#
	info 1 "Running: \"$*\""

	# is the run verbosity greater than the global one ?
	if [ ${run_verbosity} -gt ${verbosity} ];
	then
		# if not dry_run, run the command and redirect the output to /dev/null
		[ "${dry_run}" != "yes" ] && $* 1>/dev/null
	else
		# if not dry_run, run the command, leave the output on stdout
		[ "${dry_run}" != "yes" ] && $*
	fi
}



# expands variables that contain paths (from ~ to /home/user, for example)
function expand_paths()
{
	# virtualbox seems to get confused about paths containing "~"
	eval vmpath=${vmpath}
	eval windows_iso=${windows_iso}
	eval sqlserver_iso=${sqlserver_iso}
	eval virtio_iso=${virtio_iso}
	eval assetsdir=${assetsdir}
}



# creates the windows image in virtualbox.
function run_virtualbox()
{

	local vm

	if [ -e ${vmpath}/vbox/${vmname}/${vmname}.vdi ];
	then
		info 3 "Unregister & delete harddisk"
		VBoxManage closemedium disk ${vmpath}/vbox/${vmname}/${vmname}.vdi --delete
	fi

	for vm in `VBoxManage list vms|cut -f 2 -d \{|cut -f 1 -d \}`;
	do
		info 3 "Unregistering virtual machine $vm"
		run 2 VBoxManage unregistervm $vm
	done


	if [ -d "${vmpath}/vbox/${vmname}" ];
	then
		info 3 "Delete old VM directory"
		run 2 rm -rf "${vmpath}/vbox/${vmname}"
	fi

	info 3 "Create VM and register with VirtualBox"
	run 2 VBoxManage createvm --name ${vmname} --register --ostype Windows2012_64 --basefolder ${vmpath}/vbox

	info 3 "Create disk"
	run 2 VBoxManage createhd --filename ${vmpath}/vbox/${vmname}/${vmname}.vdi --size 100000 --variant standard

	info 3 "Create storage controller (for disk & CDROM)"
	run 2 VBoxManage storagectl ${vmname} --name "IDE" --add ide --controller PIIX4

	info 3 "Attach disk"
	run 2 VBoxManage storageattach ${vmname} --storagectl "IDE" --port 0 --device 1 --type hdd --medium  ${vmpath}/vbox/${vmname}/${vmname}.vdi

	info 3 "Create floppy controller"
	run 2 VBoxManage storagectl ${vmname} --name "Floppy" --add floppy

	info 3 "Attach unattend.img to floppy controller"
	run 2 VBoxManage storageattach ${vmname} --storagectl "Floppy" --port 0 --device 0 --type fdd --medium ${vmpath}/unattend.img

	info 3 "Create storage controller (for disk & CDROM)"
	run 2 VBoxManage storagectl ${vmname} --name "SATA" --add sata --controller IntelAHCI --portcount 4

	info 3 "Attach ISO to DVD"
	run 2 VBoxManage storageattach ${vmname} --storagectl "SATA" --port 0 --type dvddrive --medium ${windows_iso}
	[ ! -z "${virtio_iso}" ] && run 2 VBoxManage storageattach ${vmname} --storagectl "SATA" --port 1 --type dvddrive --medium ${virtio_iso}
	[ ! -z "${sqlserver_iso}" ] && run 2 VBoxManage storageattach ${vmname} --storagectl "SATA" --port 2 --type dvddrive --medium ${sqlserver_iso}

	# mount shared folder
#	run 2 VBoxManage sharedfolder add ${vmname} --name output --hostpath ${vmpath}/output --automount

	run 2 VBoxManage modifyvm ${vmname} --boot1 disk
	run 2 VBoxManage modifyvm ${vmname} --boot2 dvd
	run 2 VBoxManage modifyvm ${vmname} --boot3 none
	run 2 VBoxManage modifyvm ${vmname} --boot4 none

	info 3 "Binding eth0 to the virtual machine (NAT)"
	run 2 VBoxManage modifyvm ${vmname} --nic1 nat --cableconnected1 on
	run 2 VBoxManage modifyvm ${vmname} --memory 4096
	run 2 VBoxManage modifyvm ${vmname} --clipboard bidirectional

	run 2 VBoxManage startvm ${vmname}

	#run 2 VBoxManage guestcontrol  ${vmname} updateadditions --source /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso --verbose
}



# checks if isos were specified and map them to (ascending) drive letters. The drive letters are specified as space delimited parameters to the function
function map_drive_letters()
{
	# is the windows iso specified ?
	if [ ! -z "${windows_iso}" ];
	then
		echo "$1:,windows"
		shift
	fi

	# is the virtio iso specified ?
	if [ ! -z "${virtio_iso}" ];
	then
		echo "$1:,virtio"
		shift
	fi

	# is the sqlserver iso specified ?
	if [ ! -z "${sqlserver_iso}" ];
	then
		echo "$1:,sqlserver${sqlserverversion}"
		shift
	fi

}


# create the temporary directory if it doesent exist
if [ ! -d ${tmpdir} ];
then
	info 3 "Creating temporary directory"
	run 3 mkdir -p "${tmpdir}"
fi

parse_parameters $*
get_os
expand_paths
set_colors
validate_environment_vars
validate_net_connectivity
validate_prerequisites
check_os
validate_profiles
create_vfd
run_virtualbox

# remove temporary directory
info 3 "Remove temporary directory"
run 3 rm -rf "${tmpdir}"

